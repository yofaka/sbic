/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sbic;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import static sbic.Locations.tableRowSorter;

public class Locations extends javax.swing.JPanel {

    static TableRowSorter tableRowSorter;
    static Location selectedLocation; // contains Item category object from the the currently selected row of table
    static boolean newForm; // is true if form is loaded to  save new and false if form is loaded to update
    static Location[] locations;

    /**
     * Creates new form Items
     */
    public Locations() throws SQLException {
        initComponents();
        loadLocations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        locationForm = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        saveItemCategoryBtn = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        typeField = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        addBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationsTable = new javax.swing.JTable();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();

        locationForm.setSize(new java.awt.Dimension(400, 400));

        jLabel1.setText("Add / Edit Supplier");

        saveItemCategoryBtn.setText("Save");
        saveItemCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemCategoryBtnActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        descriptionField.setColumns(20);
        descriptionField.setRows(5);
        jScrollPane2.setViewportView(descriptionField);

        jLabel2.setText("Description");

        jLabel3.setText("Name");

        jLabel5.setText("Type");

        typeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Store" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(saveItemCategoryBtn)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addComponent(typeField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(1, 1, 1)))))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(saveItemCategoryBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout locationFormLayout = new javax.swing.GroupLayout(locationForm.getContentPane());
        locationForm.getContentPane().setLayout(locationFormLayout);
        locationFormLayout.setHorizontalGroup(
            locationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        locationFormLayout.setVerticalGroup(
            locationFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        locationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(locationsTable);

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        jLabel4.setText("Search");

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(editBtn)
                    .addComponent(deleteBtn)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(refreshBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addGap(117, 117, 117))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        newForm = true;
        clearLocationForm();
        locationForm.setVisible(true);
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        newForm = false;
        clearLocationForm();
        nameField.setText(selectedLocation.getName());
        descriptionField.setText(selectedLocation.getDescription());
        locationForm.setVisible(true);

    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        try {
            if (!selectedLocation.canDelete()) {

                JOptionPane.showMessageDialog(this, "You can not delete this Location because it has items attached to it.", "Delete Location", JOptionPane.ERROR_MESSAGE);
            } else {

                if (JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Delete " + selectedLocation.getName() + "?", "Delete Location", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {

                    if (selectedLocation.delete()) {
                        JOptionPane.showMessageDialog(this, selectedLocation.getName() + " deleted succesfully!", "Delete Location", JOptionPane.INFORMATION_MESSAGE);
                        loadLocations();
                    } else {
                        JOptionPane.showMessageDialog(this, "Deleting " + selectedLocation.getName() + " failed!", "Delete Location", JOptionPane.ERROR_MESSAGE);
                    }
                } else {

                }

            }
        } catch (SQLException e) {

        }

    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        // TODO add your handling code here:

        String searchKey = searchField.getText();
        if (searchKey.trim().length() == 0) {
            tableRowSorter.setRowFilter(null);
        } else {
            tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchKey));
        }
    }//GEN-LAST:event_searchFieldKeyReleased

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        try {
            // TODO add your handling code here:
            loadLocations();
        } catch (SQLException ex) {
            Logger.getLogger(Locations.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void saveItemCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemCategoryBtnActionPerformed

        try {

            if (newForm) {

                if (nameField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Name", "Add Location", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isProperName(nameField)) {

                    JOptionPane.showMessageDialog(this, "Name can't be longer than 30 characters.", "Add Location", JOptionPane.ERROR_MESSAGE);
                } else {

                    if (Location.nameExists(nameField.getText(), "")) {

                        JOptionPane.showMessageDialog(this, "Location Name Exists", "Add Location", JOptionPane.ERROR_MESSAGE);

                    } else {

                        Location newLocation = new Location(nameField.getText(), typeField.getSelectedItem().toString(),  descriptionField.getText());
                        if (newLocation.save()) {
                            JOptionPane.showMessageDialog(this, "Location Registered Succesfully", "Add Location", JOptionPane.INFORMATION_MESSAGE);
                            locationForm.setVisible(false);
                            loadLocations();
                        }
                    }

                }

            } else {

                if (nameField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Name", "Edit Location", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isProperName(nameField)) {

                    JOptionPane.showMessageDialog(this, "Name can't be longer than 30 characters.", "Add Location", JOptionPane.ERROR_MESSAGE);
                } else {

                    if (Location.nameExists(nameField.getText(), selectedLocation.getName())) {

                        JOptionPane.showMessageDialog(this, "Location Name Exists", "Edit Location", JOptionPane.ERROR_MESSAGE);

                    } else {

                        selectedLocation.setName(nameField.getText());
                        selectedLocation.setDescription(descriptionField.getText());

                        if (selectedLocation.save()) {
                            JOptionPane.showMessageDialog(this, "Location Updated Succesfully", "Edit Location", JOptionPane.INFORMATION_MESSAGE);
                            locationForm.setVisible(false);
                            loadLocations();
                        }
                    }

                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(Locations.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveItemCategoryBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JFrame locationForm;
    private javax.swing.JTable locationsTable;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton saveItemCategoryBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> typeField;
    // End of variables declaration//GEN-END:variables

    void loadLocations() throws SQLException {

        searchField.setText("");

        if (!Session.getLoggedInUser().getRole().equals("Administrator")) {

            addBtn.setEnabled(false);
        }

        editBtn.setEnabled(false);

        deleteBtn.setEnabled(false);

        String tableColumns[] = {"No", "Serial", "Name", "Type", "Description"};

        locations = Location.findAll();

        Object tableDataRows[][] = new Object[locations.length][5];

        int numberOfRows = 0;

        for (Location supplier : locations) {

            tableDataRows[numberOfRows][0] = (numberOfRows + 1);
            tableDataRows[numberOfRows][1] = supplier.getId();
            tableDataRows[numberOfRows][2] = supplier.getName();
            tableDataRows[numberOfRows][3] = supplier.getType();
            tableDataRows[numberOfRows][4] = supplier.getDescription();
           

            numberOfRows++;
        }

        TableModel itemCategoriesTableModel = new DefaultTableModel(tableDataRows, tableColumns) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        locationsTable.setModel(itemCategoriesTableModel);

        ListSelectionModel itemCategoriesTableSelectionModel = locationsTable.getSelectionModel();

        tableRowSorter = new TableRowSorter(locationsTable.getModel());

        locationsTable.setRowSorter(tableRowSorter);

        itemCategoriesTableSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (itemCategoriesTableSelectionModel.getMaxSelectionIndex() == -1) {

                    editBtn.setEnabled(false);

                    deleteBtn.setEnabled(false);

                } else {

                    if (Session.getLoggedInUser().getRole().equals("Administrator")) {
                        editBtn.setEnabled(true);
                        
                        deleteBtn.setEnabled(true);
                        
                    }
                    selectedLocation = Location.find((int) locationsTable.getValueAt(locationsTable.getSelectedRow(), 1));
                }
            }
        });
    }

    void clearLocationForm() {

        nameField.setText("");
        typeField.setSelectedIndex(0);
        descriptionField.setText("");
       

    }

}
