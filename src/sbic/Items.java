/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sbic;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Yoftahe
 */
public class Items extends javax.swing.JPanel {

    static TableRowSorter tableRowSorter;

    static Item selectedItem;
    static boolean newForm;
    static ItemCategory[] listedItemCategories;

    /**
     * Creates new form Items
     */
    public Items() throws SQLException {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        form = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        itemCategoryField = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        uomField = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        saveBtn = new javax.swing.JButton();
        unitPriceField = new javax.swing.JSpinner();
        minStockLevelField = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();

        form.setResizable(false);
        form.setSize(new java.awt.Dimension(400, 600));

        jLabel1.setText("Add / Edit Items");

        jLabel2.setText("Code");

        jLabel3.setText("Name");

        jLabel5.setText("Item Category");

        uomField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pcs", "KGs", "Lit", "Box", "Pack" }));
        uomField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uomFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Unit of Measurement ");

        jLabel7.setText("Unit Price");

        jLabel8.setText("Minimum Stock Level");

        descriptionLabel.setText("Description");

        descriptionField.setColumns(20);
        descriptionField.setRows(5);
        jScrollPane2.setViewportView(descriptionField);

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        unitPriceField.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0E7d, 1.0d));

        minStockLevelField.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0E7d, 1.0d));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(codeField)
                                .addComponent(jLabel3)
                                .addComponent(nameField)
                                .addComponent(itemCategoryField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(uomField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8))
                            .addComponent(descriptionLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minStockLevelField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(2, 2, 2)
                .addComponent(itemCategoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minStockLevelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(saveBtn)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout formLayout = new javax.swing.GroupLayout(form.getContentPane());
        form.getContentPane().setLayout(formLayout);
        formLayout.setHorizontalGroup(
            formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        formLayout.setVerticalGroup(
            formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Search");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(addBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deleteBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(refreshBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addBtn)
                        .addComponent(editBtn)
                        .addComponent(deleteBtn)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(refreshBtn))
                    .addGap(34, 34, 34)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        try {
            clearForm();
            loadItemCategoryField();
            newForm = true;
            form.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        try {
            newForm = false;
            clearForm();
            loadItemCategoryField();

            codeField.setText(selectedItem.getCode());
            nameField.setText(selectedItem.getName());
            itemCategoryField.setSelectedItem(selectedItem.getItemCategory().getName());
            uomField.setSelectedItem(selectedItem.getUom());
            unitPriceField.setValue(selectedItem.getUnitPrice());
            minStockLevelField.setValue(selectedItem.getMinStockLevel());
            descriptionLabel.setText(selectedItem.getDescription());
            form.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        try {
            if (!selectedItem.canDelete()) {

                JOptionPane.showMessageDialog(this, "You can not delete this Item because you have atleast one GRN, Sales or Disposal records attached to it.", "Delete Item", JOptionPane.ERROR_MESSAGE);
            } else {

                if (JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Delete " + selectedItem.getName() + "?", "Delete Item Category", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {

                    if (selectedItem.delete()) {
                        JOptionPane.showMessageDialog(this, selectedItem.getName() + " deleted succesfully!", "Delete Item", JOptionPane.INFORMATION_MESSAGE);
                        loadData();
                    } else {
                        JOptionPane.showMessageDialog(this, "Deleting " + selectedItem.getName() + " failed!", "Delete Item", JOptionPane.ERROR_MESSAGE);
                    }
                } else {

                }

            }
        } catch (SQLException e) {

        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        try {
            // TODO add your handling code here:
            loadData();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_refreshBtnActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        // TODO add your handling code here:

        String searchKey = searchField.getText();
        if (searchKey.trim().length() == 0) {
            tableRowSorter.setRowFilter(null);
        } else {
            tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchKey));
        }
    }//GEN-LAST:event_searchFieldKeyReleased

    private void uomFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uomFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uomFieldActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed

        System.out.println(listedItemCategories[itemCategoryField.getSelectedIndex()].getName());

        try {

            if (newForm) {

                if (codeField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Item Code", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (nameField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Item Name", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (unitPriceField.getValue().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Unit Price", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (minStockLevelField.getValue().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Minimum Stock Level", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (Item.codeExists(codeField.getText(), "")) {

                    JOptionPane.showMessageDialog(this, "Item Code Already Exists", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (Item.nameExists(nameField.getText(), "")) {

                    JOptionPane.showMessageDialog(this, "Item Name Already Exists", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isNumberGreaterThan(unitPriceField, 0)) {

                    JOptionPane.showMessageDialog(this, "Unit Price Needs To Be A Number Greater Than 0 ", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isNumberGreaterThan(minStockLevelField, 0)) {

                    JOptionPane.showMessageDialog(this, "Minimum Stock Level Needs To Be A Number Greater Than 0 ", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else {

                    Item newItem = new Item(codeField.getText(), nameField.getText(), listedItemCategories[itemCategoryField.getSelectedIndex()], uomField.getSelectedItem().toString(), (double) unitPriceField.getValue(), 0, (double) minStockLevelField.getValue(), descriptionField.getText());
                    if (newItem.save()) {
                        JOptionPane.showMessageDialog(this, "Item Registered Succesfully", "Add Item", JOptionPane.INFORMATION_MESSAGE);
                        form.setVisible(false);
                        loadData();
                    }else{
                      JOptionPane.showMessageDialog(this, "Item Registeration Failed", "Add Item", JOptionPane.ERROR_MESSAGE);
                      
                    }

                }

            } else {

                if (codeField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Item Code", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (nameField.getText().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Item Name", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (unitPriceField.getValue().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Unit Price", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (minStockLevelField.getValue().equals("")) {

                    JOptionPane.showMessageDialog(this, "Enter Minimum Stock Level", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (Item.codeExists(codeField.getText(), selectedItem.getCode())) {

                    JOptionPane.showMessageDialog(this, "Item Code Already Exists", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (Item.nameExists(nameField.getText(), selectedItem.getName())) {

                    JOptionPane.showMessageDialog(this, "Item Name Already Exists", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isNumberGreaterThan(unitPriceField, 0)) {

                    JOptionPane.showMessageDialog(this, "Unit Price Needs To Be A Number Greater Than 0 ", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else if (!Validator.isNumberGreaterThan(minStockLevelField, 0)) {

                    JOptionPane.showMessageDialog(this, "Minimum Stock Level Needs To Be A Number Greater Than 0 ", "Add Item", JOptionPane.ERROR_MESSAGE);
                } else {

                    selectedItem.setCode(codeField.getText());
                    selectedItem.setName(nameField.getText());
                    selectedItem.setItemCategory(listedItemCategories[itemCategoryField.getSelectedIndex()]);
                    selectedItem.setUom(uomField.getSelectedItem().toString());
                    selectedItem.setUnitPrice((double)unitPriceField.getValue());
                    selectedItem.setMinStockLevel((double) minStockLevelField.getValue());
                    selectedItem.setDescription(descriptionField.getText());

                    if (selectedItem.save()) {
                        JOptionPane.showMessageDialog(this, "Item Updated Succesfully", "Edit Item Category", JOptionPane.INFORMATION_MESSAGE);
                        form.setVisible(false);
                        clearForm();
                        loadData();
                    }

                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(ItemCategories.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_saveBtnActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    void loadData() throws SQLException {

        editBtn.setEnabled(false);

        deleteBtn.setEnabled(false);

        String tableColumns[] = {"No", "Code", "Name", "Item Category", "Unit Of Measurement", "Unit Price", "Quantity At Hand", "Minimum Stock Level", "Description"};

        Item[] items = Item.findAll();

        Object tableDataRows[][] = new Object[items.length][9];

        int numberOfRows = 0;

        for (Item item : items) {

            tableDataRows[numberOfRows][0] = (numberOfRows + 1);
            tableDataRows[numberOfRows][1] = item.getCode();
            tableDataRows[numberOfRows][2] = item.getName();
            tableDataRows[numberOfRows][3] = item.getItemCategory().getName();
            tableDataRows[numberOfRows][4] = item.getUom();
            tableDataRows[numberOfRows][5] = item.getUnitPrice();
            tableDataRows[numberOfRows][6] = item.getQuantityAtHand();
            tableDataRows[numberOfRows][7] = item.getMinStockLevel();
            tableDataRows[numberOfRows][8] = item.getDescription();

         
            numberOfRows++;
        }

        TableModel itemCategoriesTableModel = new DefaultTableModel(tableDataRows, tableColumns);

        table.setModel(itemCategoriesTableModel);

        ListSelectionModel itemCategoriesTableSelectionModel = table.getSelectionModel();

        tableRowSorter = new TableRowSorter(table.getModel());

        table.setRowSorter(tableRowSorter);

        itemCategoriesTableSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (itemCategoriesTableSelectionModel.getMaxSelectionIndex() == -1) {

                    editBtn.setEnabled(false);

                    deleteBtn.setEnabled(false);

                } else {

                    editBtn.setEnabled(true);

                    deleteBtn.setEnabled(true);
                    selectedItem = items[itemCategoriesTableSelectionModel.getMaxSelectionIndex()];
                }
            }
        });

    }

    void clearForm() throws SQLException {

        loadItemCategoryField();
        codeField.setText("");
        nameField.setText("");
        itemCategoryField.setSelectedIndex(0);
        uomField.setSelectedIndex(0);
        unitPriceField.setValue(0);
        minStockLevelField.setValue(0);
        descriptionLabel.setText("");

    }

    void loadItemCategoryField(String selectedItemCategoryName) throws SQLException {

        listedItemCategories = ItemCategory.findAll();

         itemCategoryField.removeAllItems();
        
        for (ItemCategory itemCategory : listedItemCategories) {

            itemCategoryField.addItem(itemCategory.getName());

            if (selectedItemCategoryName.equals(itemCategory.getName())) {

                itemCategoryField.setSelectedItem(selectedItemCategoryName);
            }

        }

    }

     void loadItemCategoryField() throws SQLException {

        listedItemCategories = ItemCategory.findAll();
        
        itemCategoryField.removeAllItems();

        for (ItemCategory itemCategory : listedItemCategories) {

            itemCategoryField.addItem(itemCategory.getName());


        }

    }
 
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField codeField;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editBtn;
    private javax.swing.JFrame form;
    private javax.swing.JComboBox<String> itemCategoryField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner minStockLevelField;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable table;
    private javax.swing.JSpinner unitPriceField;
    private javax.swing.JComboBox<String> uomField;
    // End of variables declaration//GEN-END:variables
}
